#!/usr/bin/perl
use strict;        # insist that all variables be declared
use diagnostics;   # expand the cryptic warnings

MAIN:{

  # Take the documentation from a text file and insert it into a C++
  # file to be compiled and embedded with the executable.

  my $htmlDocFile = "documentation.html";
  my $cppDocFile  = "documentation.cpp";

  open(FILE, "<$htmlDocFile");
  my $preProcDocText = join("", <FILE>);
  close(FILE);

  # Make the image local and rm XEmacs's autogenerated html tag
  $preProcDocText =~ s/\"[^\"]*?pvLogo.png.*?\"/:pvLogo.png/g;
  $preProcDocText =~ s/Updated:.*?$//sg;

  my $docText = "";
  foreach my $line ( split("\n", $preProcDocText)  ){
    $line =~ s/\"/\\\"/g; # Escape any quotes
    $docText .= '"' . $line . '\\n"' . "\n";
  }
  $docText =~ s/\s*$//g;

  open(FILE, "<$cppDocFile") || die "Cannot open file: $cppDocFile\n";
  my $text = join("", <FILE>);
  close(FILE);

  $docText = 'char docText[] =' . $docText . ";\n";

  if ($text =~ /(^.*?\/\/\s*Begin.*?\n).*?([ ]*\/\/\s*End.*?)$/s){
    $text = $1 . $docText . $2;
    $text =~ s/\s*$/\n/g;
    print "Success updating the doc.\n";
  }else{
    print "Failed updating the doc.\n";
    exit(1);
  }

  open(FILE, ">$cppDocFile");
  print FILE $text;
  close(FILE);

}
